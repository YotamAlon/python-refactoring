{
  "name": "python-refactoring",
  "displayName": "Python Refactoring",
  "description": "",
  "version": "0.0.5",
  "homepage": "https://github.com/YotamAlon/python-refactoring",
  "icon": "assets/icon.png",
  "publisher": "YotamAlon",
  "repository": {
    "type": "git",
    "url": "https://github.com/YotamAlon/python-refactoring.git"
  },
  "engines": {
    "vscode": "^1.89.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [
    "onLanguage:python"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "python-refactoring.inline",
        "title": "Refactor: Inline"
      },
      {
        "command": "python-refactoring.introduce_parameter",
        "title": "Refactor: Introduce parameter"
      },
      {
        "command": "python-refactoring.local_to_field",
        "title": "Refactor: Change a local variable to field"
      }
    ],
    "configuration": {
      "title": "python-refactoring",
      "type": "object",
      "properties": {
        "rope.ignored_resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specify which files and folders to ignore in the project",
          "order": 0
        },
        "rope.source_folders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Custom source folders",
          "order": 1
        },
        "pylsp.configurationSources": {
          "type": "array",
          "default": [
            "pycodestyle"
          ],
          "description": "List of configuration sources to use.",
          "items": {
            "type": "string",
            "enum": [
              "pycodestyle",
              "pyflakes"
            ]
          },
          "uniqueItems": true
        },
        "pylsp.plugins.jedi.extra_paths": {
          "type": "array",
          "default": [],
          "description": "Define extra paths for jedi.Script."
        },
        "pylsp.plugins.jedi.env_vars": {
          "type": "object",
          "default": null,
          "description": "Define environment variables for jedi.Script and Jedi.names."
        },
        "pylsp.plugins.jedi.environment": {
          "type": "string",
          "default": null,
          "description": "Define environment for jedi.Script and Jedi.names."
        },
        "pylsp.plugins.jedi_completion.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.jedi_completion.include_params": {
          "type": "boolean",
          "default": true,
          "description": "Auto-completes methods and classes with tabstops for each parameter."
        },
        "pylsp.plugins.jedi_completion.include_class_objects": {
          "type": "boolean",
          "default": true,
          "description": "Adds class objects as a separate completion item."
        },
        "pylsp.plugins.jedi_completion.fuzzy": {
          "type": "boolean",
          "default": false,
          "description": "Enable fuzzy when requesting autocomplete."
        },
        "pylsp.plugins.jedi_completion.eager": {
          "type": "boolean",
          "default": false,
          "description": "Resolve documentation and detail eagerly."
        },
        "pylsp.plugins.jedi_completion.resolve_at_most": {
          "type": "number",
          "default": 25,
          "description": "How many labels and snippets (at most) should be resolved?"
        },
        "pylsp.plugins.jedi_completion.cache_for": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "pandas",
            "numpy",
            "tensorflow",
            "matplotlib"
          ],
          "description": "Modules for which labels and snippets should be cached."
        },
        "pylsp.plugins.jedi_definition.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.jedi_definition.follow_imports": {
          "type": "boolean",
          "default": true,
          "description": "The goto call will follow imports."
        },
        "pylsp.plugins.jedi_definition.follow_builtin_imports": {
          "type": "boolean",
          "default": true,
          "description": "If follow_imports is True will decide if it follow builtin imports."
        },
        "pylsp.plugins.jedi_hover.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.jedi_references.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.jedi_signature_help.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.jedi_symbols.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.jedi_symbols.all_scopes": {
          "type": "boolean",
          "default": true,
          "description": "If True lists the names of all scopes instead of only the module namespace."
        },
        "pylsp.plugins.jedi_symbols.include_import_symbols": {
          "type": "boolean",
          "default": true,
          "description": "If True includes symbols imported from other libraries."
        },
        "pylsp.plugins.mccabe.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.mccabe.threshold": {
          "type": "number",
          "default": 15,
          "description": "The minimum threshold that triggers warnings about cyclomatic complexity."
        },
        "pylsp.plugins.preload.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.preload.modules": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "List of modules to import on startup"
        },
        "pylsp.plugins.pycodestyle.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.pycodestyle.exclude": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Exclude files or directories which match these patterns."
        },
        "pylsp.plugins.pycodestyle.filename": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "When parsing directories, only check filenames matching these patterns."
        },
        "pylsp.plugins.pycodestyle.select": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Select errors and warnings"
        },
        "pylsp.plugins.pycodestyle.ignore": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Ignore errors and warnings"
        },
        "pylsp.plugins.pycodestyle.hangClosing": {
          "type": "boolean",
          "default": null,
          "description": "Hang closing bracket instead of matching indentation of opening bracket's line."
        },
        "pylsp.plugins.pycodestyle.maxLineLength": {
          "type": "number",
          "default": null,
          "description": "Set maximum allowed line length."
        },
        "pylsp.plugins.pycodestyle.indentSize": {
          "type": "integer",
          "default": null,
          "description": "Set indentation spaces."
        },
        "pylsp.plugins.pydocstyle.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.pydocstyle.convention": {
          "type": "string",
          "default": null,
          "enum": [
            "pep257",
            "numpy"
          ],
          "description": "Choose the basic list of checked errors by specifying an existing convention."
        },
        "pylsp.plugins.pydocstyle.addIgnore": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Ignore errors and warnings in addition to the specified convention."
        },
        "pylsp.plugins.pydocstyle.addSelect": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Select errors and warnings in addition to the specified convention."
        },
        "pylsp.plugins.pydocstyle.ignore": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Ignore errors and warnings"
        },
        "pylsp.plugins.pydocstyle.select": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Select errors and warnings"
        },
        "pylsp.plugins.pydocstyle.match": {
          "type": "string",
          "default": "(?!test_).*\\.py",
          "description": "Check only files that exactly match the given regular expression; default is to match files that don't start with 'test_' but end with '.py'."
        },
        "pylsp.plugins.pydocstyle.matchDir": {
          "type": "string",
          "default": "[^\\.].*",
          "description": "Search only dirs that exactly match the given regular expression; default is to match dirs which do not begin with a dot."
        },
        "pylsp.plugins.rope_completion.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.plugins.rope_completion.eager": {
          "type": "boolean",
          "default": false,
          "description": "Resolve documentation and detail eagerly."
        },
        "pylsp.plugins.yapf.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the plugin."
        },
        "pylsp.rope.extensionModules": {
          "type": "string",
          "default": null,
          "description": "Builtin and c-extension modules that are allowed to be imported and inspected by rope."
        },
        "pylsp.rope.ropeFolder": {
          "type": "array",
          "default": null,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "The name of the folder in which rope stores project configurations and data.  Pass `null` for not using such a folder at all."
        }
      }
      
      }
    }
  ,
  "scripts": {
    "vscode:prepublish": "npm run compile && npm run bundle",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run bundle && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test",
    "bundle": "pip install --upgrade --target bundled/ -r requirements.txt"
  },
  "extensionDependencies": [
    "ms-python.python"
  ],
  "dependencies": {
    "@types/vscode": "^1.89.0",
    "@vscode/python-extension": "^1.0.5",
    "vscode-languageclient": "^7.0.0"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.6",
    "@types/node": "18.x",
    "@types/vscode": "^1.89.0",
    "@typescript-eslint/eslint-plugin": "^7.7.1",
    "@typescript-eslint/parser": "^7.7.1",
    "@vscode/test-cli": "^0.0.9",
    "@vscode/test-electron": "^2.3.9",
    "eslint": "^8.57.0",
    "typescript": "^5.4.5"
  }
}
